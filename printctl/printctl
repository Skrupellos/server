#!/usr/bin/python2

import cups
import os
import select
import fcntl
import datetime
import errno
from pysnmp.entity.rfc3413.oneliner import cmdgen
from pysnmp.proto.errind import RequestTimedOut
import logging
import ConfigParser


class RecoverableException(Exception):
	pass



class Snmp(object):
	def __init__(self, host = "localhost", port = 161, community = "public"):
		self.__community = cmdgen.CommunityData(community)
		self.__target = cmdgen.UdpTransportTarget((host, port))
		self.__cmdGen = cmdgen.CommandGenerator()
	
	
	def query(self, oids = []):
		errorIndication, errorStatus, errorIndex, varBinds = apply(
			self.__cmdGen.getCmd,
			(self.__community, self.__target) + tuple(oids)
		)
		
		## Network error -> Propagate
		if errorIndication:
			raise errorIndication
		
		## SNMP error -> Create describing exception
		elif errorStatus:
			raise Exception("%s at %s" % (
				errorStatus.prettyPrint(),
				errorIndex and varBinds[int(errorIndex) - 1] or "?"
			))
		
		## Single result -> Return only value
		elif len(varBinds) == 1:
			return varBinds[0][1]
		
		## Multiple results -> Return dict
		else:
			result = {}
			for name, val in varBinds:
				result[name.prettyPrint()] = val
			return result



class Gpio(object):
	def __init__(self):
		self.__state = self._get()
	
	
	def s(self, state = True):
		if state != self.__state:
			self.__state = state
			logging.info("GPIO is now %s", state)
			self._set(state)
			return True
		
		else:
			return False
	
	
	def c(self):
		return self.s(False)
	
	
	def isSet(self):
		return self.__state
	
	
	def getName(self):
		return self.__name
	
	
	def _get(self):
		raise NotImplemented()
	
	
	def _set(self, state):
		raise NotImplemented()



class GpioGpio(Gpio):
	def __init__(self, name):
		self.__name = name
		self.__f = open("%s/value" % name, "r+")
		super(GpioGpio, self).__init__()
	
	
	def _get(self):
		return (self.__f.read() != "0\n")
	
	
	def _set(self, state):
		self.__f.write("1\n" if state else "0\n")
		self.__f.flush()



class LedGpio(Gpio):
	def __init__(self, name):
		self.__name = name
		
		self.__f = open("%s/brightness" % name, "r+")
		with open("%s/max_brightness" % name, "r") as f:
			self.__max = f.read()
		
		super(LedGpio, self).__init__()
	
	
	def _get(self):
		return (self.__f.read() != "0\n")
	
	
	def _set(self, state):
		self.__f.write(self.__max if state else "0\n")
		self.__f.flush()



class FakeGpio(Gpio):
	def _get(self):
		return False
	
	
	def _set(self, state):
		pass



class OutletCtl(object):
	def __init__(self, printer, gpio, snmp, controlPath, statusPath, stats = None):
		## Parameters
		self.__printer = printer
		self.__gpio = gpio
		self.__snmp = snmp
		self.__controlPath = controlPath
		self.__statusPath = statusPath
		self.__stats = stats
		
		## Misc
		self.__cc = cups.Connection()
		
		self.__setupSubscription()
		
		## Criteria
		self.__mode = "auto"
		self.__timeout = datetime.datetime(1970, 1, 1)
		self.updateJobs()
	
	
	
	def __setupSubscription(self):
		queueUrl = ("/printers/%s" % self.__printer)
		recipientUri = ("check://%s" % self.__controlPath)
		
		try:
			for subscription in self.__cc.getSubscriptions(queueUrl):
				if subscription["notify-recipient-uri"].startswith("check://"):
					logging.info("Found subscription, deleting it")
					self.__cc.cancelSubscription(subscription["notify-subscription-id"])
					break
		
		except cups.IPPError as ex:
			if ex.args[0] != 1030:
				raise ex
		
		self.__cc.createSubscription(
			queueUrl,
			events=["printer-state-changed"],
			recipient_uri = (recipientUri),
			lease_duration = 0
		)
		
		logging.info("Adding subscription %s", recipientUri)
	
	
	
	def setMode(self, mode):
		if mode not in ["auto", "on", "off"]:
			raise RecoverableException("Invalid mode %s" % mode)
		
		self.__mode = mode
		
		logging.info("Mode is now %s", mode)
	
	
	
	def setTimeout(self, s):
		self.__timeout = datetime.datetime.now() + datetime.timedelta(0, s + 1)
		
		logging.info("Timeout is now %s", s)
	
	
	
	def updateJobs(self):
		# RFC 2911
		# 3 (idle):       Indicates that new jobs can start processing without waiting.
		# 4 (processing): Indicates that jobs are processing; new jobs will wait before
		#                 processing.
		# 5 (stopped):    Indicates that no jobs can be processed and intervention is
		#                 required.
		self.__hasJobs = (self.__cc.getPrinterAttributes(
			name = self.__printer,
			requested_attributes = ["printer-state"]
		)["printer-state"] == 4)
		
		logging.info("Checked for jobs: %s", self.__hasJobs)
	
	
	
	def update(self):
		tDelta = (self.__timeout - datetime.datetime.now()).total_seconds()
		timeout = -1
		reason = None
		
		
		## === Ascertain new state
		if self.__mode == "on":
			status = True
		
		elif self.__mode == "off":
			status = False
		
		elif self.__hasJobs:
			status = True
			reason = "jobs"
		
		elif tDelta > 0:
			status = True
			timeout = tDelta
		
		elif not self.__gpio.isSet():
			status = False
			reason = "not powered"
		
		else:
			try:
				if self.__snmp.query(["1.3.6.1.2.1.43.16.5.1.2.1.1"]) == "Power Saver     ":
					## Power saver
					status = False
					reason = "not powered"
				
				else:
					## Online
					status = True
					timeout = 5
			
			except RequestTimedOut:
				## Offline
				status = True
				timeout = 2
				reason = "waiting for printer to come online"
		
		
		## === Write report
		with open(self.__statusPath, "w") as f:
			f.write("status: %s\n" % status)
			f.write("reason: %s mode\n" % self.__mode)
			
			if tDelta > 0:
				f.write("reason: keep-alive\n")
			
			if reason is not None:
				f.write("reason: %s\n" % reason)
		
		
		## === Write stats
		if self.__gpio.isSet() and not status and self.__stats is not None:
			self.__stats.update()
		
		
		## === Propagate new state
		self.__gpio.s(status)
		return timeout



class Stats(object):
	def __init__(self, path, snmp, base, interval = None):
		self.__path = path
		self.__snmp = snmp
		self.__base = base
		self.__interval = interval
		
		self.__names = {
			1: "toner-cyan",
			2: "toner-magenta",
			3: "toner-yellow",
			4: "toner-black",
			5: "waste",
			6: "fuser",
			7: "itu",
			8: "imaging_kit"
		}
		
		self.__oids = ["1.3.6.1.2.1.43.10.2.1.4.1.1"]
		for i in self.__names:
			self.__oids.append("1.3.6.1.2.1.43.11.1.1.8.1.%i" % i)
			self.__oids.append("1.3.6.1.2.1.43.11.1.1.9.1.%i" % i)
	
	
	def __addItem(self, f, name, value):
		if self.__interval is None:
			intervalStr = ""
		else:
			intervalStr = ("interval=%i" % self.__interval)
		
		f.write("PUTVAL %s/%s %s N:%s\n" % (self.__base, name, intervalStr, value))
	
	
	def update(self):
			try:
				results = self.__snmp.query(self.__oids)
			except RequestTimedOut:
				logging.info("Collecting stats timed out")
				return False
			
			with open(self.__path, "w") as f:
				self.__addItem(
					f,
					"gauge-sheets",
					results["1.3.6.1.2.1.43.10.2.1.4.1.1"]
				)
				
				for i in self.__names:
					maxLevel = int(results["1.3.6.1.2.1.43.11.1.1.8.1.%i" % i])
					curLevel = int(results["1.3.6.1.2.1.43.11.1.1.9.1.%i" % i])
					
					relLevel = 100.0 * curLevel / maxLevel
					if relLevel < 0:
						relLevel = 0.0
					if relLevel > 100:
						relLevel = 100.0
					
					self.__addItem(f, "gauge-%s" % self.__names[i], curLevel)
					self.__addItem(f, "percent-%s" % self.__names[i], relLevel)
			
			logging.info("Collecting stats finished successfully")
			return True



class NamedPipeLineReader(object):
	def __init__(self, path):
		self.__path  = path
	
	
	def waitLine(self, timeoutCallback):
		remainingData = ""
		
		for data in self.__waitData(timeoutCallback):
			if data is None:
				yield None
			
			else:
				if remainingData is not None:
					lines = (remainingData + data).split("\n")
					## Only the first lines gets data (without an "\n")
					## prefixed, therefore only the first line can become to big
					if len(lines[0]) > 511:
						logging.info("Discarding oversized line '%s'", lines[0])
						lines = lines[1:]
				
				## We have no valid data from the last time, indicating an error
				## has occurred. Therefore the first "line" still belongs to the
				## bogus data and has to be discarded.
				else:
					lines = data.split("\n")[1:]
				
				## Now lines contains only valid or no line (The last "line" is
				## not terminated and belongs to the next data)
				
				if len(lines) > 0:
					## Save the last line for the next round
					remainingData = lines[-1]
					
					## Return all other lines (all except for the last one)
					for line in lines[:-1]:
						yield line
				
				else:
					remainingData = None
	
	
	def __waitData(self, timeoutCallback):
		## Open the reading end of the named pipe as non-blocking
		## The "+" causes the file to stay open if the other side disconnects
		f = open(self.__path, "r+")
		fd = f.fileno()
		fcntl.fcntl(fd, fcntl.F_SETFL, fcntl.fcntl(fd, fcntl.F_GETFL) | os.O_NONBLOCK)
		
		## Purge old data out of the named pipe
		while True:
			try:
				logging.warning(
					"Discarding old data from named pipe '%s'",
					os.read(fd, 1024)
				)
			except OSError, ex:
				if ex.errno == errno.EAGAIN:
					break
				else:
					raise ex
		
		## Setup level triggered polling
		epoll = select.epoll()
		epoll.register(fd, select.EPOLLIN)
		
		## Poll to infinity
		while True:
			events = epoll.poll(timeoutCallback(), 1)
			
			if len(events) == 0:
				yield None
			else:
				yield os.read(fd, 512)



class MessageBroker(object):
	def __init__(self, server, outletCtl):
		self.__server = server
		self.__outletCtl = outletCtl
		
		self.__cmdHandlers = {
			"mode": self.__cmdMode,
			"check": self.__cmdCheck,
			"keep-alive": self.__cmdKeepAlive
		}
	
	
	def run(self):
		for line in self.__server.waitLine(self.__outletCtl.update):
			if line is None:
				logging.info("timeout")
				continue
			
			cmds = line.split(" ")
			if cmds[0] not in self.__cmdHandlers:
				logging.warning("Unknown command '%s'", cmds[0])
				continue
			
			logging.info("Line '%s'", line)
			try:
				self.__cmdHandlers[cmds[0]](cmds[1:])
			except RecoverableException as ex:
				logging.warning(
					"Invalid command %s syntax: %s",
					cmds[0],
					ex.message
				)
	
	
	def __cmdMode(self, cmds):
		if len(cmds) != 1:
			raise RecoverableException("Invalid mode invocation")
		
		self.__outletCtl.setMode(cmds[0])
	
	
	def __cmdCheck(self, cmds):
		self.__outletCtl.updateJobs()
	
	
	def __cmdKeepAlive(self, cmds):
		if len(cmds) != 1 or not cmds[0].isdigit():
			raise RecoverableException("Invalid keep-alive invocation")
		
		self.__outletCtl.setTimeout(int(cmds[0]))



## Read config
config = ConfigParser.SafeConfigParser({
	"log_level": "WARNING",
	"stats_interval": 5*60,
	"led": None
})
config.read(["/etc/printctl.ini", "printctl.ini"])

logLevel = config.get("printctl", "log_level").upper()
if logLevel not in ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]:
	raise Exception("'%s' is an invalid log level." % logLevel)
logLevel = getattr(logging, logLevel)

controlPath = config.get("printctl", "control_path")


## Setup logging
logging.basicConfig(
	format = "%(asctime)s - %(levelname)s in %(funcName)s(): %(message)s",
	datefmt = "%Y-%m-%d %H:%M:%S",
	level = logLevel
)


## Construct everything
snmp = Snmp(config.get("printer", "host"))


if config.get("gpio", "gpio") is not None:
	gpio = GpioGpio(config.get("gpio", "gpio"))
elif config.get("gpio", "led") is not None:
	gpio = LedGpio(config.get("gpio", "led"))
else:
	gpio = FakeGpio()


if config.has_section("stats"):
	stats = Stats(
		config.get("stats", "path"),
		snmp,
		config.get("stats", "base"),
		config.getint("stats", "interval")
	)

else:
	stats = None


MessageBroker(
	NamedPipeLineReader(controlPath),
	
	OutletCtl(
		config.get("printer", "name"),
		gpio,
		snmp,
		controlPath,
		config.get("printctl", "status_path"),
		stats
	)
).run()
