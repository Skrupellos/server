diff -u -r facette-0.1.2/docs/examples/facette.json facette-0.1.2.new/docs/examples/facette.json
--- facette-0.1.2/docs/examples/facette.json	2014-08-01 14:47:55.000000000 +0200
+++ facette-0.1.2.new/docs/examples/facette.json	2014-08-23 22:22:28.872020750 +0200
@@ -1,5 +1,8 @@
 {
 	"bind": ":12003",
+	"socket_user": "",
+	"socket_group": "",
+	"socket_mode": "",
 	"base_dir": "/usr/share/facette",
 	"providers_dir": "/etc/facette/providers",
 	"data_dir": "/var/lib/facette",
Only in facette-0.1.2.new/: node_modules
diff -u -r facette-0.1.2/pkg/config/config.go facette-0.1.2.new/pkg/config/config.go
--- facette-0.1.2/pkg/config/config.go	2014-08-01 14:47:55.000000000 +0200
+++ facette-0.1.2.new/pkg/config/config.go	2014-08-23 19:53:30.951916088 +0200
@@ -29,6 +29,9 @@
 	Path         string                     `json:"-"`
 	LogFile      string                     `json:"-"`
 	BindAddr     string                     `json:"bind"`
+	SocketUser   string                     `json:"socket_user"`
+	SocketGroup  string                     `json:"socket_group"`
+	SocketMode   string                     `json:"socket_mode"`
 	BaseDir      string                     `json:"base_dir"`
 	DataDir      string                     `json:"data_dir"`
 	ProvidersDir string                     `json:"providers_dir"`
diff -u -r facette-0.1.2/pkg/server/worker_serve.go facette-0.1.2.new/pkg/server/worker_serve.go
--- facette-0.1.2/pkg/server/worker_serve.go	2014-08-01 14:47:55.000000000 +0200
+++ facette-0.1.2.new/pkg/server/worker_serve.go	2014-08-23 22:18:53.670572936 +0200
@@ -3,6 +3,10 @@
 import (
 	"net"
 	"net/http"
+	"os"
+	"os/user"
+	"strconv"
+	"errors"
 
 	"github.com/facette/facette/pkg/logger"
 	"github.com/facette/facette/pkg/worker"
@@ -63,7 +67,12 @@
 	http.Handle("/", router)
 
 	// Start serving HTTP requests
-	listener, err := net.Listen("tcp", server.Config.BindAddr)
+	netType := "tcp"
+	if server.Config.BindAddr[0] == '/' {
+		netType = "unix"
+	}
+	
+	listener, err := net.Listen(netType, server.Config.BindAddr)
 	if err != nil {
 		w.ReturnErr(err)
 		return
@@ -71,6 +80,83 @@
 
 	logger.Log(logger.LevelInfo, "serveWorker", "listening on %s", server.Config.BindAddr)
 
+	if netType == "unix" {
+		uid := -1
+		gid := -1
+		
+		// Get owning user
+		if server.Config.SocketUser != "" {
+			uid, err = strconv.Atoi(server.Config.SocketUser)
+			if err != nil {
+				userInfo, err := user.Lookup(server.Config.SocketUser)
+				if err != nil {
+					logger.Log(logger.LevelError, "serveWorker", "failed to look up user %s", server.Config.SocketUser)
+					listener.Close()
+					w.ReturnErr(err)
+					return
+				}
+				
+				uid, err = strconv.Atoi(userInfo.Uid)
+				if err != nil {
+					logger.Log(logger.LevelError, "serveWorker", "Invalid UID '%s' for user '%s'", userInfo.Uid, server.Config.SocketUser)
+					listener.Close()
+					w.ReturnErr(err)
+					return
+				}
+			}
+			
+			if uid < 0 {
+				listener.Close()
+				w.ReturnErr(errors.New("UID from socket_user is less than 0 (socket_user has to be valid UID or username)"))
+				return
+			}
+		}
+		
+		// Get owning group (until now, go doesn't support group lookus)
+		if server.Config.SocketGroup != "" {
+			gid, err = strconv.Atoi(server.Config.SocketGroup)
+			
+			if err != nil {
+				logger.Log(logger.LevelError, "serveWorker", "Invalid socket_group (has to be valid GID)")
+				listener.Close()
+				w.ReturnErr(err)
+				return
+			} else if gid < 0 {
+				listener.Close()
+				w.ReturnErr(errors.New("GID from socket_group is less than 0 (socket_group has to be valid GID)"))
+				return
+			}
+		}
+		
+		// Change owing user and group
+		logger.Log(logger.LevelInfo, "serveWorker", "changing ownership of unix socket to UID %v (%s) and GID %v (%s)", uid, server.Config.SocketUser, gid, server.Config.SocketGroup)
+		err = os.Chown(server.Config.BindAddr, uid, gid)
+		if err != nil {
+			listener.Close()
+			w.ReturnErr(err)
+			return
+		}
+		
+		// Change mode
+		if server.Config.SocketMode != "" {
+			mode, err := strconv.ParseUint(server.Config.SocketMode, 8, 32)
+			if err != nil {
+				logger.Log(logger.LevelError, "serveWorker", "socket_mode is invalid")
+				listener.Close()
+				w.ReturnErr(err)
+				return
+			}
+			
+			logger.Log(logger.LevelInfo, "serveWorker", "changing file permissions mode of unix socket to %04o", mode)
+			err = os.Chmod(server.Config.BindAddr, os.FileMode(mode))
+			if err != nil {
+				listener.Close()
+				w.ReturnErr(err)
+				return
+			}
+		}
+	}
+	
 	go http.Serve(listener, nil)
 
 	for {
